To improve the current e-REC system, we can introduce an **Admin Side** with additional functionalities, such as monitoring submissions, converting CSV files to JSON format for storage in Firestore, and tracking review deadlines for reassignment. Here's an outline of the improvements:

---

## **Admin Side Overview**

### **Purpose**

The Admin Side will enable administrators to:

* Monitor all submitted reviews
* Track the progress of ongoing reviews
* Reassign reviews that are nearing or past their due date
* Convert submitted CSV files into JSON format for storing data in Firestore

### **Key Features**

#### **1. Admin Dashboard**

The Admin Dashboard serves as the primary interface for administrators. Key components include:

* **Review Tracking**: Monitor the status of all protocol reviews, including those that are completed, in progress, or overdue.
* **Due Date Monitoring**: View review deadlines for each protocol and automatically flag overdue protocols.
* **Reviewer Assignment**: Reassign protocols that have not been reviewed within the specified deadline.
* **Submission Overview**: Track submission dates and statuses for each reviewer.

#### **2. CSV to JSON Conversion**

* Admins will upload CSV files containing protocol information.
* The system will convert the CSV data into a JSON format.
* The converted data will then be pushed to a **Firestore Database**, ensuring secure and efficient storage.

#### **3. Due Date Tracking and Review Reassignment**

* The system will automatically calculate the review due date based on the release period and protocol assignment.
* Admins will be notified when a protocol’s review is overdue.
* Admins can reassign overdue reviews to a new reviewer to maintain deadlines.

---

## **System Workflow Improvements**

### **1. Admin Authentication and Access Control**

* **Authentication**: Admins will log in using secure credentials (could be integrated with existing reviewer authentication or a separate system).
* **Role-based Access Control (RBAC)**: The Admins will have full access to monitor, update, and reassign reviews.

### **2. Review Monitoring and Reassignment**

* **Review Status**: Display a table of all protocols with columns for:

  * Protocol name
  * Assigned reviewer
  * Due date
  * Review status (Completed, In Progress, Overdue)
* **Due Date Tracking**: The system will flag protocols that are overdue, based on their due dates.
* **Automatic Reassignment**: Once a review is marked as overdue, the Admin can reassign it to another reviewer.

### **3. CSV Upload and Conversion to JSON**

* **CSV Upload**: Admin can upload CSV files containing protocol details.
* **Conversion**: The uploaded CSV will be parsed and converted to a JSON object that matches the schema for Firestore storage.
* **Firestore Integration**: The JSON data will be pushed to Firestore, allowing easy retrieval and management of protocol data.

### **4. Real-time Monitoring**

* **Notifications for Admins**: Admins will receive real-time notifications when a review is overdue or a new submission is received.
* **Tracking Tools**: Implement filters to sort reviews by status, release period, and reviewer.

---

## **Frontend and Backend Technologies for Admin Side**

### **Frontend**

* **Framework**: React (for dynamic content management and efficient rendering)
* **UI Components**:

  * Tables for review tracking with pagination and filtering
  * Upload form for CSV files
  * Notifications (modals or toast alerts) for overdue reviews
* **Libraries**: Use Material UI for modern design components (tables, buttons, forms).

### **Backend**

* **Firestore Database**: Store protocol data and track review statuses. Use Firebase Functions to process data from CSV and convert it into JSON.
* **CSV to JSON Converter**:

  * Parse CSV using a library like **PapaParse**.
  * Convert to a JSON structure and push to Firestore using **Firebase Admin SDK**.

### **Due Date Management**:

* Implement automatic calculation of review due dates using JavaScript date libraries (e.g., **moment.js** or **date-fns**).
* Store the due dates in Firestore for easy comparison.

---

## **Admin Dashboard Mockup**

**Dashboard View**

* **Active Reviews**: A section showing reviews that are still in progress.
* **Overdue Reviews**: A list of reviews that are past their due date and require reassignment.
* **Upcoming Due Dates**: A calendar or list view showing reviews that are due in the next 7 days.
* **CSV Upload Section**: A form to upload CSV files and view conversion progress.

---

## **Database Schema (Firestore)**

The Firestore database can store protocol data as follows:

```json
protocols/                // Root collection for all protocols
└── {MonthYear}/               // Document for each month (e.g., May2025)
    └── {week-n}/              // Collection for each week (e.g., week-1)
        └── {SPUP_REC_Code}/   // Document for each protocol, identified by SPUP REC Code
            ├── principal_investigator: "Dr. John Doe"
            ├── research_title: "Study on AI"
            ├── adviser: "Prof. Jane Smith"
            ├── course_program: "Computer Science"
            ├── e_link: "http://example.com"
            ├── created_at: "2023-10-12T07:20:50.52Z"
            └── reviewers: [   // Array of reviewers
                {
                    id: "reviewer1",
                    name: "Reviewer One",
                    form_type: "PRA1",
                    status: "In Progress",
                    due_date: "2025-05-29"
                },
                // ... more reviewers
            ]
```

### **CSV to JSON Conversion Example**

Given a CSV file like:

```csv
Protocol Name,Release Period,Academic Level,Reviewer,Due Date,Status,Protocol Link
SPUP_2025_12345_SR_JD,First,Graduate,DRAPL-001,2025-05-12,In Progress,https://sharepoint.link
```

After conversion, the system would create a JSON object:

```json
{
  "protocols": {
    "SPUP_2025_12345_SR_JD": {
      "release_period": "First",
      "academic_level": "Graduate",
      "reviewer": "DRAPL-001",
      "due_date": "2025-05-12",
      "status": "In Progress",
      "protocol_file": "https://sharepoint.link"
    }
  }
}
```

---

## **Technical Workflow for CSV Conversion and Upload**

1. **Admin uploads CSV file** using the frontend interface.
2. **CSV file parsing** using **PapaParse** in the frontend or **Firebase Functions**.
3. **Data conversion to JSON** and structure matching the Firestore schema.
4. **Pushing JSON data to Firestore** via **Firebase Admin SDK**.
5. **Data retrieval and monitoring** via Firestore, accessible by the Admin Dashboard.

---

## **Conclusion**

The addition of the **Admin Side** will improve the e-REC system by enabling centralized monitoring of protocol reviews, automatic due date tracking, and efficient handling of protocol data through CSV-to-JSON conversion and Firestore storage. This enhancement will help ensure that reviews are completed on time and allow administrators to manage assignments more effectively.
